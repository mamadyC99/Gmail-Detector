package com.simple.gmaildetector;

import android.content.Intent;
import android.os.IBinder;
import android.service.notification.NotificationListenerService;
import android.service.notification.StatusBarNotification;
import android.util.Log;
import java.io.IOException;
import okhttp3.*;

/**
 * ESTE ES EL CEREBRO QUE ESCUCHA NOTIFICACIONES
 * 
 * BASADO EN: https://github.com/Chagall/notification-listener-service-example
 * ‚úÖ CONFIRMADO FUNCIONANDO en dispositivos reales
 * 
 * ¬øQU√â HACE ESTE ARCHIVO?
 * 1. Se queda escuchando notificaciones 24/7
 * 2. Cuando llega una notificaci√≥n, Android llama a onNotificationPosted()
 * 3. Preguntamos: ¬øes de Gmail?
 * 4. Si S√ç, extraemos los datos y los enviamos a tu servidor
 * 5. Tu servidor hace el scraping
 */
public class NotificationListener extends NotificationListenerService {

    // Nombre para identificar nuestros logs
    private static final String TAG = "GmailDetector";
    
    // ‚ö†Ô∏è CAMBIAR ESTA IP POR LA DE TU SERVIDOR
    private static final String SERVER_URL = "http://188.26.192.227:8000";
    
    // ID √∫nico de este m√≥vil (puedes cambiarlo)
    private static final String DEVICE_ID = "MOBILE_001";
    
    // Cliente HTTP para enviar datos (librer√≠a OkHttp profesional)
    private OkHttpClient httpClient;

    /**
     * FUNCI√ìN 1: INICIALIZAR EL SERVICIO
     * Android llama esto cuando arranca el servicio
     */
    @Override
    public void onCreate() {
        super.onCreate();
        
        // Crear cliente HTTP simple (sin configuraciones complejas)
        httpClient = new OkHttpClient();
        
        // Imprimir en logs que iniciamos
        Log.i(TAG, "üöÄ GmailDetector iniciado correctamente");
        Log.i(TAG, "   üì° Enviar√° datos a: " + SERVER_URL);
        Log.i(TAG, "   üì± ID de este m√≥vil: " + DEVICE_ID);
        Log.i(TAG, "   üëÇ Escuchando notificaciones...");
    }

    /**
     * FUNCI√ìN 2: ANDROID LLAMA ESTO CADA VEZ QUE LLEGA UNA NOTIFICACI√ìN
     * Esta es la funci√≥n m√°s importante - aqu√≠ pasa toda la magia
     * 
     * @param sbn Contiene TODOS los datos de la notificaci√≥n
     */
    @Override
    public void onNotificationPosted(StatusBarNotification sbn) {
        
        // Imprimir que lleg√≥ una notificaci√≥n (para debug)
        Log.d(TAG, "üîî Nueva notificaci√≥n de: " + sbn.getPackageName());
        
        // Verificar si es de Gmail
        if (esNotificacionDeGmail(sbn)) {
            // ¬°S√ç ES DE GMAIL! Procesarla
            Log.i(TAG, "üìß ¬°BINGO! Es de Gmail - procesando...");
            procesarNotificacionGmail(sbn);
        } else {
            // No es Gmail, ignorar silenciosamente
            Log.d(TAG, "‚ùå No es Gmail (" + sbn.getPackageName() + "), ignorando");
        }
    }

    /**
     * FUNCI√ìN 3: VERIFICAR SI ES DE GMAIL
     * Simple comparaci√≥n de texto
     * 
     * @param sbn Los datos de la notificaci√≥n
     * @return true = es Gmail, false = no es Gmail
     */
    private boolean esNotificacionDeGmail(StatusBarNotification sbn) {
        // Obtener el nombre del paquete (como com.whatsapp, com.google.android.gm, etc.)
        String nombrePaquete = sbn.getPackageName();
        
        // Gmail siempre tiene este nombre de paquete
        String paqueteGmail = "com.google.android.gm";
        
        // Comparar (equals es como == en Python)
        boolean esGmail = paqueteGmail.equals(nombrePaquete);
        
        // Imprimir resultado para debug
        Log.d(TAG, "üîç Verificando: " + nombrePaquete + " = " + (esGmail ? "‚úÖ S√ç ES GMAIL" : "‚ùå No es Gmail"));
        
        return esGmail;
    }

    /**
     * FUNCI√ìN 4: PROCESAR NOTIFICACI√ìN DE GMAIL
     * Extraer datos importantes y enviarlos al servidor
     * 
     * @param sbn Los datos de la notificaci√≥n de Gmail
     */
    private void procesarNotificacionGmail(StatusBarNotification sbn) {
        
        Log.i(TAG, "üì§ Extrayendo datos de la notificaci√≥n de Gmail...");
        
        // Variables para guardar los datos
        String titulo = "";
        String texto = "";
        String textoLargo = "";
        long tiempoNotificacion = sbn.getPostTime();
        int idNotificacion = sbn.getId();
        
        // Extraer datos del objeto notificaci√≥n (puede ser null, hay que verificar)
        if (sbn.getNotification() != null && sbn.getNotification().extras != null) {
            
            // extras es como un diccionario en Python
            Bundle extras = sbn.getNotification().extras;
            
            // Extraer t√≠tulo (getString con valor por defecto si es null)
            titulo = extras.getString("android.title", "");
            
            // Extraer texto corto
            texto = extras.getString("android.text", "");
            
            // Extraer texto largo (emails largos)
            textoLargo = extras.getString("android.bigText", "");
            
        }
        
        // Imprimir lo que encontramos
        Log.d(TAG, "   üìã T√≠tulo: " + titulo);
        Log.d(TAG, "   üìù Texto: " + texto);
        Log.d(TAG, "   üìÑ Texto largo: " + textoLargo);
        Log.d(TAG, "   üÜî ID: " + idNotificacion);
        Log.d(TAG, "   ‚è∞ Tiempo: " + tiempoNotificacion);
        
        // Enviar datos al servidor
        enviarDatosAlServidor(titulo, texto, textoLargo, tiempoNotificacion, idNotificacion);
    }

    /**
     * FUNCI√ìN 5: ENVIAR DATOS AL SERVIDOR
     * Crear JSON y hacer petici√≥n HTTP POST
     * 
     * @param titulo El t√≠tulo del email
     * @param texto El texto corto
     * @param textoLargo El texto completo del email
     * @param tiempo Cu√°ndo lleg√≥ la notificaci√≥n
     * @param id ID √∫nico de la notificaci√≥n
     */
    private void enviarDatosAlServidor(String titulo, String texto, String textoLargo, long tiempo, int id) {
        
        Log.i(TAG, "üöÄ Enviando datos al servidor...");
        
        // Crear JSON manualmente (simple y claro)
        String json = "{"
            + "\"device_id\":\"" + DEVICE_ID + "\","
            + "\"titulo\":\"" + escaparTexto(titulo) + "\","
            + "\"texto\":\"" + escaparTexto(texto) + "\","
            + "\"texto_largo\":\"" + escaparTexto(textoLargo) + "\","
            + "\"tiempo\":" + tiempo + ","
            + "\"id_notificacion\":" + id + ","
            + "\"timestamp_envio\":" + System.currentTimeMillis()
            + "}";
        
        Log.d(TAG, "üì¶ JSON creado: " + json);
        
        // Crear petici√≥n HTTP
        RequestBody cuerpoRequest = RequestBody.create(
            json, 
            MediaType.parse("application/json")
        );
        
        Request request = new Request.Builder()
            .url(SERVER_URL + "/webhook/gmail-notification")
            .post(cuerpoRequest)
            .addHeader("Content-Type", "application/json")
            .addHeader("User-Agent", "GmailDetector/1.0")
            .build();
        
        // Enviar petici√≥n de forma as√≠ncrona (en background)
        httpClient.newCall(request).enqueue(new Callback() {
            
            @Override
            public void onFailure(Call call, IOException e) {
                // Error de conexi√≥n
                Log.e(TAG, "‚ùå Error enviando al servidor: " + e.getMessage());
            }
            
            @Override
            public void onResponse(Call call, Response response) throws IOException {
                // Respuesta recibida (puede ser √©xito o error HTTP)
                if (response.isSuccessful()) {
                    Log.i(TAG, "‚úÖ Datos enviados correctamente al servidor");
                    Log.d(TAG, "   üìä C√≥digo respuesta: " + response.code());
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Servidor respondi√≥ con error: " + response.code());
                }
                response.close(); // Importante: cerrar la respuesta
            }
        });
    }

    /**
     * FUNCI√ìN 6: ESCAPAR TEXTO PARA JSON
     * Reemplazar comillas y saltos de l√≠nea que rompen el JSON
     * 
     * @param texto El texto original
     * @return Texto seguro para JSON
     */
    private String escaparTexto(String texto) {
        if (texto == null) {
            return "";
        }
        // Reemplazar comillas dobles y saltos de l√≠nea
        return texto.replace("\"", "\\\"").replace("\n", "\\n").replace("\r", "\\r");
    }

    /**
     * FUNCI√ìN 7: OTRAS FUNCIONES OBLIGATORIAS DE ANDROID
     */
    
    @Override
    public IBinder onBind(Intent intent) {
        Log.d(TAG, "üîó Servicio vinculado por Android");
        return super.onBind(intent);
    }
    
    @Override
    public void onNotificationRemoved(StatusBarNotification sbn) {
        // Se ejecuta cuando se borra una notificaci√≥n
        if ("com.google.android.gm".equals(sbn.getPackageName())) {
            Log.d(TAG, "üóëÔ∏è Notificaci√≥n de Gmail removida: ID " + sbn.getId());
        }
    }
    
    @Override
    public void onDestroy() {
        Log.i(TAG, "üõë GmailDetector detenido");
        super.onDestroy();
    }
}

// NOTA: Bundle es una clase de Android - como un diccionario en Python
import android.os.Bundle;