package com.simple.gmaildetector;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.os.Bundle;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

/**
 * ESTA ES LA PANTALLA QUE VE EL USUARIO
 * 
 * BASADO EN: https://github.com/Chagall/notification-listener-service-example
 * 
 * ¬øQU√â HACE ESTA PANTALLA?
 * 1. Verificar si los permisos est√°n activados
 * 2. Mostrar instrucciones claras al usuario
 * 3. Abrir la configuraci√≥n de Android para activar permisos
 * 4. Mostrar el estado del servicio (funcionando o no)
 */
public class MainActivity extends Activity {

    // Nombre para logs
    private static final String TAG = "MainActivity";
    
    // Constantes de Android (copiadas de la documentaci√≥n oficial)
    private static final String ENABLED_NOTIFICATION_LISTENERS = "enabled_notification_listeners";
    private static final String ACTION_NOTIFICATION_LISTENER_SETTINGS = "android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS";
    
    // Referencias a elementos de la pantalla
    private TextView textoEstado;
    private Button botonConfigurar;

    /**
     * FUNCI√ìN QUE SE EJECUTA CUANDO SE ABRE LA APP
     * Es como __init__ en Python
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // Decirle a Android qu√© dise√±o usar (definido en activity_main.xml)
        setContentView(R.layout.activity_main);
        
        Log.i(TAG, "üöÄ Pantalla principal abierta");
        
        // Conectar elementos de la pantalla con variables
        inicializarElementos();
        
        // Configurar qu√© pasa cuando se tocan los botones
        configurarBotones();
        
        // Verificar estado actual
        actualizarEstado();
    }
    
    /**
     * SE EJECUTA CADA VEZ QUE VOLVEMOS A LA APP
     * Por ejemplo, despu√©s de configurar permisos
     */
    @Override
    protected void onResume() {
        super.onResume();
        Log.d(TAG, "üì± Usuario volvi√≥ a la app - verificando estado...");
        actualizarEstado();
    }

    /**
     * FUNCI√ìN: CONECTAR ELEMENTOS DE LA PANTALLA
     * findViewById es como document.getElementById en JavaScript
     */
    private void inicializarElementos() {
        Log.d(TAG, "üîó Conectando elementos de la pantalla...");
        
        // Encontrar el texto donde mostraremos el estado
        textoEstado = findViewById(R.id.texto_estado);
        
        // Encontrar el bot√≥n de configuraci√≥n
        botonConfigurar = findViewById(R.id.boton_configurar);
        
        Log.d(TAG, "‚úÖ Elementos conectados correctamente");
    }

    /**
     * FUNCI√ìN: CONFIGURAR QU√â PASA CUANDO SE TOCAN BOTONES
     */
    private void configurarBotones() {
        
        // Cuando el usuario toca el bot√≥n de configurar
        botonConfigurar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.i(TAG, "üëÜ Usuario toc√≥ bot√≥n de configuraci√≥n");
                abrirConfiguracionNotificaciones();
            }
        });
    }

    /**
     * FUNCI√ìN: VERIFICAR SI TENEMOS PERMISOS Y ACTUALIZAR PANTALLA
     */
    private void actualizarEstado() {
        Log.d(TAG, "üîç Verificando estado de permisos...");
        
        // Preguntar a Android si tenemos permisos
        boolean tenemosPermisos = verificarPermisosNotificaciones();
        
        if (tenemosPermisos) {
            mostrarEstadoActivo();
        } else {
            mostrarEstadoInactivo();
        }
    }

    /**
     * FUNCI√ìN: VERIFICAR SI TENEMOS PERMISOS DE NOTIFICACIONES
     * 
     * C√ìMO FUNCIONA:
     * 1. Android guarda una lista de apps con permisos en una configuraci√≥n
     * 2. Leemos esa configuraci√≥n
     * 3. Buscamos si nuestra app est√° en la lista
     * 
     * @return true = tenemos permisos, false = no tenemos permisos
     */
    private boolean verificarPermisosNotificaciones() {
        
        // Obtener nombre de nuestro paquete (como com.simple.gmaildetector)
        String nuestroPaquete = getPackageName();
        Log.d(TAG, "üì¶ Nuestro paquete: " + nuestroPaquete);
        
        // Leer configuraci√≥n de Android con la lista de apps autorizadas
        String listaAppsAutorizadas = Settings.Secure.getString(
            getContentResolver(), 
            ENABLED_NOTIFICATION_LISTENERS
        );
        
        Log.d(TAG, "üìã Apps con permisos: " + listaAppsAutorizadas);
        
        // Si la lista est√° vac√≠a, no tenemos permisos
        if (TextUtils.isEmpty(listaAppsAutorizadas)) {
            Log.d(TAG, "‚ùå Lista vac√≠a - no tenemos permisos");
            return false;
        }
        
        // La lista es como "com.app1:com.app2:com.app3"
        // Separar por ":" y buscar nuestro paquete
        String[] nombresApps = listaAppsAutorizadas.split(":");
        
        for (String nombreApp : nombresApps) {
            // Cada nombre puede ser como "com.simple.gmaildetector/com.simple.gmaildetector.NotificationListener"
            ComponentName componente = ComponentName.unflattenFromString(nombreApp);
            
            if (componente != null) {
                String paqueteEncontrado = componente.getPackageName();
                Log.d(TAG, "üîç Comparando: " + paqueteEncontrado + " con " + nuestroPaquete);
                
                if (nuestroPaquete.equals(paqueteEncontrado)) {
                    Log.i(TAG, "‚úÖ ¬°Encontrado! Tenemos permisos");
                    return true;
                }
            }
        }
        
        Log.d(TAG, "‚ùå No encontrado en la lista - no tenemos permisos");
        return false;
    }

    /**
     * FUNCI√ìN: MOSTRAR QUE EL SERVICIO EST√Å ACTIVO
     */
    private void mostrarEstadoActivo() {
        Log.i(TAG, "‚úÖ Mostrando estado ACTIVO");
        
        String mensaje = "‚úÖ GMAIL DETECTOR ACTIVO\n\n"
            + "üìß Escuchando notificaciones de Gmail\n"
            + "üåê Enviando datos a: http://188.26.192.227:8000\n"
            + "üì± ID dispositivo: MOBILE_001\n\n"
            + "üéØ Todo funcionando correctamente.\n"
            + "Cuando llegue un email a Gmail,\n"
            + "se enviar√° autom√°ticamente al servidor.\n\n"
            + "üí° Para ver actividad: adb logcat | grep GmailDetector";
        
        textoEstado.setText(mensaje);
        textoEstado.setTextColor(0xFF4CAF50); // Verde
        botonConfigurar.setText("üîß Reconfigurar");
    }

    /**
     * FUNCI√ìN: MOSTRAR QUE NECESITAMOS CONFIGURAR PERMISOS
     */
    private void mostrarEstadoInactivo() {
        Log.w(TAG, "‚ùå Mostrando estado INACTIVO");
        
        String mensaje = "‚ùå CONFIGURACI√ìN REQUERIDA\n\n"
            + "Para que Gmail Detector funcione:\n\n"
            + "1Ô∏è‚É£ Toca el bot√≥n de abajo\n"
            + "2Ô∏è‚É£ Busca 'Gmail Detector' en la lista\n"
            + "3Ô∏è‚É£ Activa el interruptor\n"
            + "4Ô∏è‚É£ Vuelve aqu√≠\n\n"
            + "‚ö†Ô∏è Sin estos permisos, la app\n"
            + "no puede leer notificaciones de Gmail.\n\n"
            + "üîí Es seguro - solo lee Gmail,\n"
            + "no puede leer otros datos.";
        
        textoEstado.setText(mensaje);
        textoEstado.setTextColor(0xFFFF5722); // Rojo
        botonConfigurar.setText("üîß Configurar Permisos");
    }

    /**
     * FUNCI√ìN: ABRIR CONFIGURACI√ìN DE ANDROID PARA ACTIVAR PERMISOS
     */
    private void abrirConfiguracionNotificaciones() {
        try {
            Log.i(TAG, "üîß Abriendo configuraci√≥n de acceso a notificaciones...");
            
            // Crear Intent para abrir configuraci√≥n espec√≠fica
            Intent intent = new Intent(ACTION_NOTIFICATION_LISTENER_SETTINGS);
            startActivity(intent);
            
            Log.d(TAG, "‚úÖ Configuraci√≥n abierta");
            
        } catch (Exception e) {
            Log.e(TAG, "‚ùå Error abriendo configuraci√≥n: " + e.getMessage());
            
            // Plan B: abrir configuraci√≥n general
            try {
                Intent intentGeneral = new Intent(Settings.ACTION_SETTINGS);
                startActivity(intentGeneral);
                Log.d(TAG, "üîÑ Configuraci√≥n general abierta como respaldo");
            } catch (Exception e2) {
                Log.e(TAG, "üí• Error total: " + e2.getMessage());
            }
        }
    }
}